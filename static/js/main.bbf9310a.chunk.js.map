{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Todo","_ref","todo","index","markTodo","removeTodo","react_default","a","createElement","className","style","textDecoration","isDone","text","Button","variant","onClick","FormTodo","_ref2","addTodo","_React$useState","React","useState","_React$useState2","Object","slicedToArray","value","setValue","Form","onSubmit","e","preventDefault","Group","Label","Control","type","onChange","target","placeholder","App","_React$useState3","_React$useState4","todos","setTodos","newTodos","toConsumableArray","splice","concat","map","Card","Body","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAKA,SAASA,EAATC,GAAqD,IAArCC,EAAqCD,EAArCC,KAAMC,EAA+BF,EAA/BE,MAAOC,EAAwBH,EAAxBG,SAAUC,EAAcJ,EAAdI,WACrC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAAEC,eAAgBT,EAAKU,OAAS,eAAiB,KAC3DV,EAAKW,MAERP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS,kBAAMZ,EAASD,KAA1D,UAEU,IACVG,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,QAAQ,iBAAiBC,QAAS,kBAAMX,EAAWF,KAA3D,YAQR,SAASc,EAATC,GAA+B,IAAXC,EAAWD,EAAXC,QAAWC,EACHC,IAAMC,SAAS,IADZC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACtBM,EADsBH,EAAA,GACfI,EADeJ,EAAA,GAU7B,OACEjB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,SARa,SAACC,GACpBA,EAAEC,iBACGL,IACLP,EAAQO,GACRC,EAAS,OAKPrB,EAAAC,EAAAC,cAACoB,EAAA,EAAKI,MAAN,KACE1B,EAAAC,EAAAC,cAACoB,EAAA,EAAKK,MAAN,KACE3B,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAACoB,EAAA,EAAKM,QAAN,CACEC,KAAK,OACL1B,UAAU,QACViB,MAAOA,EACPU,SAAU,SAACN,GAAD,OAAOH,EAASG,EAAEO,OAAOX,QACnCY,YAAY,kBAGhBhC,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,QAAQ,eAAeoB,KAAK,UAApC,WAyDSI,MAlDf,WAAe,IAAAC,EACanB,IAAMC,SAAS,CACvC,CACET,KAAM,0BACND,QAAQ,KAJC6B,EAAAjB,OAAAC,EAAA,EAAAD,CAAAgB,EAAA,GACNE,EADMD,EAAA,GACCE,EADDF,EAAA,GAaPrC,EAAW,SAACD,GAChB,IAAMyC,EAAQpB,OAAAqB,EAAA,EAAArB,CAAOkB,GACrBE,EAASzC,GAAOS,QAAS,EACzB+B,EAASC,IAGLvC,EAAa,SAACF,GAClB,IAAMyC,EAAQpB,OAAAqB,EAAA,EAAArB,CAAOkB,GACrBE,EAASE,OAAO3C,EAAO,GACvBwC,EAASC,IAGX,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,iBACAH,EAAAC,EAAAC,cAACS,EAAD,CAAUE,QArBA,SAACN,GACf,IAAM+B,EAAQ,GAAAG,OAAAvB,OAAAqB,EAAA,EAAArB,CAAOkB,GAAP,CAAc,CAAE7B,UAC9B8B,EAASC,MAoBLtC,EAAAC,EAAAC,cAAA,WACGkC,EAAMM,IAAI,SAAC9C,EAAMC,GAAP,OACTG,EAAAC,EAAAC,cAACyC,EAAA,EAAD,KACE3C,EAAAC,EAAAC,cAACyC,EAAA,EAAKC,KAAN,KACE5C,EAAAC,EAAAC,cAACR,EAAD,CACEmD,IAAKhD,EACLA,MAAOA,EACPD,KAAMA,EACNE,SAAUA,EACVC,WAAYA,YCnFV+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bbf9310a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./App.css\";\r\nimport { Button, Card, Form } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction Todo({ todo, index, markTodo, removeTodo }) {\r\n  return (\r\n    <div className=\"todo\">\r\n      <span style={{ textDecoration: todo.isDone ? \"line-through\" : \"\" }}>\r\n        {todo.text}\r\n      </span>\r\n      <div>\r\n        <Button variant=\"outline-success\" onClick={() => markTodo(index)}>\r\n          ✓\r\n        </Button>{\" \"}\r\n        <Button variant=\"outline-danger\" onClick={() => removeTodo(index)}>\r\n          ✕\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction FormTodo({ addTodo }) {\r\n  const [value, setValue] = React.useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!value) return;\r\n    addTodo(value);\r\n    setValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Form.Group>\r\n        <Form.Label>\r\n          <b>Add Todo</b>\r\n        </Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          className=\"input\"\r\n          value={value}\r\n          onChange={(e) => setValue(e.target.value)}\r\n          placeholder=\"Add new todo\"\r\n        />\r\n      </Form.Group>\r\n      <Button variant=\"primary mb-3\" type=\"submit\">\r\n        Submit\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = React.useState([\r\n    {\r\n      text: \"This is the Sample todo\",\r\n      isDone: false,\r\n    },\r\n  ]);\r\n\r\n  const addTodo = (text) => {\r\n    const newTodos = [...todos, { text }];\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const markTodo = (index) => {\r\n    const newTodos = [...todos];\r\n    newTodos[index].isDone = true;\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const removeTodo = (index) => {\r\n    const newTodos = [...todos];\r\n    newTodos.splice(index, 1);\r\n    setTodos(newTodos);\r\n  };\r\n   \r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"container\">\r\n        <h1 className=\"text-center mb-4\">Our Todo List</h1>\r\n        <FormTodo addTodo={addTodo} />\r\n        <div>\r\n          {todos.map((todo, index) => (\r\n            <Card>\r\n              <Card.Body>\r\n                <Todo\r\n                  key={index}\r\n                  index={index}\r\n                  todo={todo}\r\n                  markTodo={markTodo}\r\n                  removeTodo={removeTodo}\r\n                />\r\n              </Card.Body>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}